using System;
using System.Collections;

namespace MP1._6
{
    // Экземпляры этого класса будет содержать коллекция - UserCollection.
    public class Element
    {
        // Поля.
        private string name;
        private int field1;
        private int field2;
        // Конструктор.
        public Element(string s, int a, int b)
        {
            name = s;
            field1 = a;
            field2 = b;
        }
        // Свойства.
        public int Field1
        {
            get { return field1; }
            set { field1 = value; }
        }
        public int Field2
        {
            get { return field2; }
            set { field2 = value; }
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
    }
    // Класс UserCollection коллекция (набор) объектов класса Element.
    // Для применения foreach, необходимо, чтобы класс реализовывал интерфейс - IEnumerable.
 public class UserCollection : IEnumerable, IEnumerator
    {
        public Element[] elementsArray = null;
        public UserCollection()
        {
            elementsArray = new Element[4];
            elementsArray[0] = new Element("A", 1, 10);
            elementsArray[1] = new Element("B", 2, 20);
            elementsArray[2] = new Element("C", 3, 30);
            elementsArray[3] = new Element("D", 4, 40);
        }

        // Указатель текущей позиции элемента в массиве.
        int position = -1;
 // ------------------------------------------------------------------------------------------------------------------
 // Реализация интерфейса IEnumerator.
 // Передвинуть внутренний указатель (position) на одну позицию.
 public bool MoveNext()
        {
            if (position < elementsArray.Length - 1)
            {
                position++;
                return true;
            }
            else
            {
                return false;
            }
        }
        // Установить указатель (position) перед началом набора.
        public void Reset()
        {
            position = -1;
        }
        // Получить текущий элемент набора.
        public object Current
        {
            get { return elementsArray[position]; }
        }
 // -----------------------------------------------------------------------------------------------------------------
 // Реализация интерфейса - IEnumerable.
 IEnumerator IEnumerable.GetEnumerator()
        {
            return this as IEnumerator;
        }
    }
    class Program
    {
        static void Main()
        {
            UserCollection myCollection = new UserCollection();
            // Используем foreach, для обращения к каждому объекту Element внутри массива myCollection.
        foreach (Element element in myCollection)
            {
                Console.WriteLine("Name: {0} Field1: {1} Field2: {2}", element.Name,
               element.Field1, element.Field2);
            }
            //myCollection.Reset(); // Убрать комментарий для проверки.
            Console.Write(new string('-', 29) + "\n");
            // Используем foreach, для повторного обращения к каждому объекту Element внутри массива myCollection.
        foreach (Element element in myCollection)
            {
                Console.WriteLine("Name: {0} Field1: {1} Field2: {2}", element.Name,
               element.Field1, element.Field2);
            }
            Console.Write(new string('-', 29) + "\n");
            // ----------------------------------------------------------------------------------------------------------------------
             // Так работает foreach? как исправить?
             UserCollection myElementsCollection = new UserCollection();
            // foreach - приводит коллекцию к интерфейсному типу IEnumerable.
            IEnumerable enumerable = myElementsCollection as IEnumerable;
            // foreach - приводит коллекцию к интерфейсному типу вызывая метод - GetEnumerator().
        IEnumerator enumerator = enumerable.GetEnumerator();
            while (enumerator.MoveNext()) // Перемещаем курсор на 1 шаг вперед (с -1 на 0) и т.д.
        {
                Element element = enumerator.Current as Element;
                Console.WriteLine("Name: {0} Field1: {1} Field2: {2}", element.Name,
               element.Field1, element.Field2);
            }
            enumerator.Reset();
            // Задержка.
            Console.ReadKey();
        }
    }
}
